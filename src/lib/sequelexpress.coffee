_ = require 'underscore'
defaults = require 'defaults'

class SequelizeExpress
    
    constructor: (model, options) ->
        @model = model
        @attributes = _.keys _.pick model.attributes, (o) ->
            return not o._autoGenerated and not o.autoIncrement
        @associations = _.keys model.associations

        @options = defaults options,
            data_attribute: 'data'

    create: =>
        return (req, res, next) =>

            # Filter the data based on the model
            data = _.pick req.body, @attributes

            # Create the object
            @model.create(data).then (object) ->
                object.reload().then ->
                    req[@options.data_attribute] = object
                    return next()
                .catch (err) ->
                    return next err
            .catch (err) ->
                return next err

    get: (id = null) =>
        return (req, res, next) =>
            id = req.params[id] || null

            if id
                # Get the model by id
                @model.findById(id).then (object) ->
                    if object
                        req[@options.data_attribute] = object
                        return next()
                    else
                        err = new Error 'Not Found'
                        err.status = 404
                        return next err
                .catch (err) ->
                    return next err
            else
                @model.findAll().then (objects) ->
                    req[@options.data_attribute] = objects
                    return next()
                .catch (err) ->
                    return next err

    update: (id) =>
        return (req, res, next) =>
            id = req.params[id] || null
            data = req.body || null

            if id and data
                @model.findById(id).then (object) =>
                    if object
                        data = _.pick data, @attributes

                        if Object.keys(data).length == 0
                            # No data to save
                            req[@options.data_attribute] = object
                            return next()
                        else
                            # Assign the new attributes
                            _.assign object, data

                            # Save the object
                            object.save().then ->
                                req[@options.data_attribute] = object
                                return next()
                            .catch (err) ->
                                return next err
                    else
                        err = new Error 'Not Found'
                        err.statusCode = 404
                        return next err
                .catch (err) ->
                    return next err
            else
                err = new Error 'Invalid Request'
                err.statusCode = 400
                return next err

    delete: (id) =>
        return (req, res, next) =>
            id = req.params[id] || null

            if id
                @model.findById(id).then (object) ->
                    if object
                        object.destroy().then ->
                            return next()
                        .catch (err) ->
                            return next err
                    else
                        err = new Error 'Not Found'
                        err.statusCode = 404
                        return next err
                .catch (err) ->
                    return next err
            else
                err = new Error 'Invalid Request'
                err.statusCode = 400
                return next err



module.exports = SequelizeExpress
module.exports.SequelizeExpress = SequelizeExpress
module.exports.default = SequelizeExpress
