(function() {
  var SequelizeExpress, _, defaults,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  defaults = require('defaults');

  SequelizeExpress = (function() {
    function SequelizeExpress(model, options) {
      this["delete"] = bind(this["delete"], this);
      this.update = bind(this.update, this);
      this.get = bind(this.get, this);
      this.create = bind(this.create, this);
      this.model = model;
      this.attributes = _.keys(_.pick(model.attributes, function(o) {
        return !o._autoGenerated && !o.autoIncrement;
      }));
      this.associations = _.keys(model.associations);
      this.options = defaults(options, {
        data_attribute: 'data'
      });
    }

    SequelizeExpress.prototype.create = function() {
      return (function(_this) {
        return function(req, res, next) {
          var data;
          data = _.pick(req.body, _this.attributes);
          return _this.model.create(data).then(function(object) {
            return object.reload().then(function() {
              req[this.options.data_attribute] = object;
              return next();
            })["catch"](function(err) {
              return next(err);
            });
          })["catch"](function(err) {
            return next(err);
          });
        };
      })(this);
    };

    SequelizeExpress.prototype.get = function(id) {
      if (id == null) {
        id = null;
      }
      return (function(_this) {
        return function(req, res, next) {
          id = req.params[id] || null;
          if (id) {
            return _this.model.findById(id).then(function(object) {
              var err;
              if (object) {
                req[this.options.data_attribute] = object;
                return next();
              } else {
                err = new Error('Not Found');
                err.status = 404;
                return next(err);
              }
            })["catch"](function(err) {
              return next(err);
            });
          } else {
            return _this.model.findAll().then(function(objects) {
              req[this.options.data_attribute] = objects;
              return next();
            })["catch"](function(err) {
              return next(err);
            });
          }
        };
      })(this);
    };

    SequelizeExpress.prototype.update = function(id) {
      return (function(_this) {
        return function(req, res, next) {
          var data, err;
          id = req.params[id] || null;
          data = req.body || null;
          if (id && data) {
            return _this.model.findById(id).then(function(object) {
              var err;
              if (object) {
                data = _.pick(data, _this.attributes);
                if (Object.keys(data).length === 0) {
                  req[_this.options.data_attribute] = object;
                  return next();
                } else {
                  _.assign(object, data);
                  return object.save().then(function() {
                    req[this.options.data_attribute] = object;
                    return next();
                  })["catch"](function(err) {
                    return next(err);
                  });
                }
              } else {
                err = new Error('Not Found');
                err.statusCode = 404;
                return next(err);
              }
            })["catch"](function(err) {
              return next(err);
            });
          } else {
            err = new Error('Invalid Request');
            err.statusCode = 400;
            return next(err);
          }
        };
      })(this);
    };

    SequelizeExpress.prototype["delete"] = function(id) {
      return (function(_this) {
        return function(req, res, next) {
          var err;
          id = req.params[id] || null;
          if (id) {
            return _this.model.findById(id).then(function(object) {
              var err;
              if (object) {
                return object.destroy().then(function() {
                  return next();
                })["catch"](function(err) {
                  return next(err);
                });
              } else {
                err = new Error('Not Found');
                err.statusCode = 404;
                return next(err);
              }
            })["catch"](function(err) {
              return next(err);
            });
          } else {
            err = new Error('Invalid Request');
            err.statusCode = 400;
            return next(err);
          }
        };
      })(this);
    };

    return SequelizeExpress;

  })();

  module.exports = SequelizeExpress;

  module.exports.SequelizeExpress = SequelizeExpress;

  module.exports["default"] = SequelizeExpress;

}).call(this);
